class UnsupportedLanguage extends Error {
  constructor(message) {
    super(`[UnsupportedLanguage]${message}`);
  }
}

class TranslateError extends Error {
  constructor(message) {
    super(`[TranslateError]${message}`);
  }
}

const supportedLanguages = {
  sl: {
    auto: 'Detect language',
    af: 'Afrikaans',
    sq: 'Albanian',
    am: 'Amharic',
    ar: 'Arabic',
    hy: 'Armenian',
    as: 'Assamese',
    ay: 'Aymara',
    az: 'Azerbaijani',
    bm: 'Bambara',
    eu: 'Basque',
    be: 'Belarusian',
    bn: 'Bengali',
    bho: 'Bhojpuri',
    bs: 'Bosnian',
    bg: 'Bulgarian',
    ca: 'Catalan',
    ceb: 'Cebuano',
    ny: 'Chichewa',
    'zh-CN': 'Chinese',
    co: 'Corsican',
    hr: 'Croatian',
    cs: 'Czech',
    da: 'Danish',
    dv: 'Dhivehi',
    doi: 'Dogri',
    nl: 'Dutch',
    en: 'English',
    eo: 'Esperanto',
    et: 'Estonian',
    ee: 'Ewe',
    tl: 'Filipino',
    fi: 'Finnish',
    fr: 'French',
    fy: 'Frisian',
    gl: 'Galician',
    ka: 'Georgian',
    de: 'German',
    el: 'Greek',
    gn: 'Guarani',
    gu: 'Gujarati',
    ht: 'Haitian Creole',
    ha: 'Hausa',
    haw: 'Hawaiian',
    iw: 'Hebrew',
    hi: 'Hindi',
    hmn: 'Hmong',
    hu: 'Hungarian',
    is: 'Icelandic',
    ig: 'Igbo',
    ilo: 'Ilocano',
    id: 'Indonesian',
    ga: 'Irish',
    it: 'Italian',
    ja: 'Japanese',
    jw: 'Javanese',
    kn: 'Kannada',
    kk: 'Kazakh',
    km: 'Khmer',
    rw: 'Kinyarwanda',
    gom: 'Konkani',
    ko: 'Korean',
    kri: 'Krio',
    ku: 'Kurdish (Kurmanji)',
    ckb: 'Kurdish (Sorani)',
    ky: 'Kyrgyz',
    lo: 'Lao',
    la: 'Latin',
    lv: 'Latvian',
    ln: 'Lingala',
    lt: 'Lithuanian',
    lg: 'Luganda',
    lb: 'Luxembourgish',
    mk: 'Macedonian',
    mai: 'Maithili',
    mg: 'Malagasy',
    ms: 'Malay',
    ml: 'Malayalam',
    mt: 'Maltese',
    mi: 'Maori',
    mr: 'Marathi',
    'mni-Mtei': 'Meiteilon (Manipuri)',
    lus: 'Mizo',
    mn: 'Mongolian',
    my: 'Myanmar (Burmese)',
    ne: 'Nepali',
    no: 'Norwegian',
    or: 'Odia (Oriya)',
    om: 'Oromo',
    ps: 'Pashto',
    fa: 'Persian',
    pl: 'Polish',
    pt: 'Portuguese',
    pa: 'Punjabi',
    qu: 'Quechua',
    ro: 'Romanian',
    ru: 'Russian',
    sm: 'Samoan',
    sa: 'Sanskrit',
    gd: 'Scots Gaelic',
    nso: 'Sepedi',
    sr: 'Serbian',
    st: 'Sesotho',
    sn: 'Shona',
    sd: 'Sindhi',
    si: 'Sinhala',
    sk: 'Slovak',
    sl: 'Slovenian',
    so: 'Somali',
    es: 'Spanish',
    su: 'Sundanese',
    sw: 'Swahili',
    sv: 'Swedish',
    tg: 'Tajik',
    ta: 'Tamil',
    tt: 'Tatar',
    te: 'Telugu',
    th: 'Thai',
    ti: 'Tigrinya',
    ts: 'Tsonga',
    tr: 'Turkish',
    tk: 'Turkmen',
    ak: 'Twi',
    uk: 'Ukrainian',
    ur: 'Urdu',
    ug: 'Uyghur',
    uz: 'Uzbek',
    vi: 'Vietnamese',
    cy: 'Welsh',
    xh: 'Xhosa',
    yi: 'Yiddish',
    yo: 'Yoruba',
    zu: 'Zulu'
  },
  tl: {
    af: 'Afrikaans',
    sq: 'Albanian',
    am: 'Amharic',
    ar: 'Arabic',
    hy: 'Armenian',
    as: 'Assamese',
    ay: 'Aymara',
    az: 'Azerbaijani',
    bm: 'Bambara',
    eu: 'Basque',
    be: 'Belarusian',
    bn: 'Bengali',
    bho: 'Bhojpuri',
    bs: 'Bosnian',
    bg: 'Bulgarian',
    ca: 'Catalan',
    ceb: 'Cebuano',
    ny: 'Chichewa',
    'zh-CN': 'Chinese (Simplified)',
    'zh-TW': 'Chinese (Traditional)',
    co: 'Corsican',
    hr: 'Croatian',
    cs: 'Czech',
    da: 'Danish',
    dv: 'Dhivehi',
    doi: 'Dogri',
    nl: 'Dutch',
    en: 'English',
    eo: 'Esperanto',
    et: 'Estonian',
    ee: 'Ewe',
    tl: 'Filipino',
    fi: 'Finnish',
    fr: 'French',
    fy: 'Frisian',
    gl: 'Galician',
    ka: 'Georgian',
    de: 'German',
    el: 'Greek',
    gn: 'Guarani',
    gu: 'Gujarati',
    ht: 'Haitian Creole',
    ha: 'Hausa',
    haw: 'Hawaiian',
    iw: 'Hebrew',
    hi: 'Hindi',
    hmn: 'Hmong',
    hu: 'Hungarian',
    is: 'Icelandic',
    ig: 'Igbo',
    ilo: 'Ilocano',
    id: 'Indonesian',
    ga: 'Irish',
    it: 'Italian',
    ja: 'Japanese',
    jw: 'Javanese',
    kn: 'Kannada',
    kk: 'Kazakh',
    km: 'Khmer',
    rw: 'Kinyarwanda',
    gom: 'Konkani',
    ko: 'Korean',
    kri: 'Krio',
    ku: 'Kurdish (Kurmanji)',
    ckb: 'Kurdish (Sorani)',
    ky: 'Kyrgyz',
    lo: 'Lao',
    la: 'Latin',
    lv: 'Latvian',
    ln: 'Lingala',
    lt: 'Lithuanian',
    lg: 'Luganda',
    lb: 'Luxembourgish',
    mk: 'Macedonian',
    mai: 'Maithili',
    mg: 'Malagasy',
    ms: 'Malay',
    ml: 'Malayalam',
    mt: 'Maltese',
    mi: 'Maori',
    mr: 'Marathi',
    'mni-Mtei': 'Meiteilon (Manipuri)',
    lus: 'Mizo',
    mn: 'Mongolian',
    my: 'Myanmar (Burmese)',
    ne: 'Nepali',
    no: 'Norwegian',
    or: 'Odia (Oriya)',
    om: 'Oromo',
    ps: 'Pashto',
    fa: 'Persian',
    pl: 'Polish',
    pt: 'Portuguese',
    pa: 'Punjabi',
    qu: 'Quechua',
    ro: 'Romanian',
    ru: 'Russian',
    sm: 'Samoan',
    sa: 'Sanskrit',
    gd: 'Scots Gaelic',
    nso: 'Sepedi',
    sr: 'Serbian',
    st: 'Sesotho',
    sn: 'Shona',
    sd: 'Sindhi',
    si: 'Sinhala',
    sk: 'Slovak',
    sl: 'Slovenian',
    so: 'Somali',
    es: 'Spanish',
    su: 'Sundanese',
    sw: 'Swahili',
    sv: 'Swedish',
    tg: 'Tajik',
    ta: 'Tamil',
    tt: 'Tatar',
    te: 'Telugu',
    th: 'Thai',
    ti: 'Tigrinya',
    ts: 'Tsonga',
    tr: 'Turkish',
    tk: 'Turkmen',
    ak: 'Twi',
    uk: 'Ukrainian',
    ur: 'Urdu',
    ug: 'Uyghur',
    uz: 'Uzbek',
    vi: 'Vietnamese',
    cy: 'Welsh',
    xh: 'Xhosa',
    yi: 'Yiddish',
    yo: 'Yoruba',
    zu: 'Zulu'
  },
  al: {}
};

async function _request({ src, dst, text }) {
  const response = await fetch(`https://${Buffer.from('dHJhbnNsYXRlLmdvb2dsZWFwaXMuY29t', 'base64').toString('utf8')}/translate_a/single?client=gtx&sl=${src}&tl=${dst}&dt=t&dj=1&q=${encodeURIComponent(text)}`, {
    "headers": {
      "accept": "*/*",
    },
    "body": null,
    "method": "GET"
  });
  const result = await response.json();
  const sentences = result['sentences'];
  if (sentences === undefined) {
    throw new TranslateError('"sentences" in response');
  }
  if (sentences.length === 0) {
    return '';
  }
  const [sentence] = sentences;
  return sentence['trans'] || '';
}
async function translate({ srcLangCode = 'auto', dstLangCode = 'auto', text = '' }) {
  if (srcLangCode !== 'auto' && !supportedLanguages['sl'].hasOwnProperty(srcLangCode)) {
    throw new UnsupportedLanguage('srcLangCode only supports "auto" and languages in supportedLanguages.sl');
  }
  if (!supportedLanguages['tl'].hasOwnProperty(dstLangCode)) {
    throw new UnsupportedLanguage('dstLangCode only supports languages in supportedLanguages.tl');
  }
  return _request({ src: srcLangCode, dst: dstLangCode, text });
}

function getTextToSpeechURL({ lang, text }) {
  if (!supportedLanguages['sl'].hasOwnProperty(lang)) {
    throw new UnsupportedLanguage('lang only supports languages in supportedLanguages.sl');
  }
  return `https://${Buffer.from('dHJhbnNsYXRlLmdvb2dsZWFwaXMuY29t', 'base64').toString('utf8')}/translate_tts?client=gtx&tl=${lang}&q=${encodeURIComponent(text)}`
}

module.exports = {
  supportedLanguages,
  translate,
  getTextToSpeechURL,
  UnsupportedLanguage,
  TranslateError
}
